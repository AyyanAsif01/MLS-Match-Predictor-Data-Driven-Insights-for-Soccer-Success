import osimport numpy as mpimport pandas as pdfrom time import time# Set working directory to file locationnew_directory = input('Enter the Location of the Parent Folder that Contains This File (Without Quotation Marks): ')#r'C:\Users\Ayyan\OneDrive\Documents\Ayyan NMSU Stuff\Current Classes\C S-519 Applied Machine Learning I\Group Project\GP_Stage 5\Main'os.chdir(new_directory)overall_time_start = time()# Read in match data. This is our main table for predictionmatch = pd.read_csv('match.csv')data = match # Set our data that will be manipulated to match# Step 1: Clean match data by removing useless rows and columnsimport Ayyan_Data_Cleaning_Matches as clmdata = clm.clean_match_data(data)# Step 2: Extract XML dataimport Ayyan_Extract_XML as extract_xmldata = extract_xml.extract(data)    # Remove original XML columnsdata = data.drop(columns = ['goal', 'shoton', 'shotoff', 'foulcommit', 'card', 'cross', 'corner', 'possession'])# Step 3: Create new columns with team stats from last 10 matchesimport Ayyan_Calc_Stats as kcsdata = kcs.calc_stats(data) # Step 4: Read in new tables, fill missing info, & clean tablesteam_attributes = pd.read_csv('team_attributes.csv')team_attributes = team_attributes.drop('buildUpPlayDribbling', axis=1) #Only column with any incomplete data#team_attributes['date'] = pd.to_datetime(team_attributes['date']).dt.dateimport Ayyan_Data_Prediction_Player_Attributes as dppaprint('Predicting the missing player_attributes data takes a lot of time.')time_saver = int(input('Would you like to save time by using the dataset that already has the predictions filled in? 1 = "Yes", 2 = "No'))if time_saver == 1:    player_attributes = pd.read_csv('player_attributes_time_saver_temp.csv') if time_saver == 2:    player_attributes = pd.read_csv('player_attributes.csv')    player_attributes = dppa.clean_player_data(player_attributes) #Predicts missing values and removes unnecessary columns    player_attributes.to_csv('player_attributes_time_saver_temp.csv', sep =',') # Step 5: Combine tablesimport Ayyan_Final_training_dataset as aftddata = aftd.combine_tables(data, team_attributes, player_attributes)# Choose What to Predict & Obtain Number of Classesimport Ayyan_Prediction_Selection as epsy, n_classes = eps.prediction_selection(data)# Step 6: Dimensionality Reductionimport Ayyan_Dimensionality_Reduction as kdrX_std_lda = kdr.lda_reduction(data, n_classes, y)# Step 7: Conduct Linear and Classification Analysis import Ayyan_Prediction_Code as apcapc.prediction(X_std_lda, y)#print("Writing Finished File...")#data.to_csv('result#2.csv', index=False)